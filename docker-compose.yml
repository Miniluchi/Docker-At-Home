# Docker Compose avec profils
# Profils disponibles:
# - infrastructure: Services de base (Traefik, Portainer, Watchtower)
# - dashboard: Tableaux de bord comme Homarr
# - media: Services liés aux médias (Plex, Overseerr)
# - domotique: Services domotiques (Home Assistant, Zigbee2MQTT, Mosquitto)
# - database: Bases de données (PostgreSQL, MySQL, Redis) et outils d'administration
# - rss: Services RSS (FreshRSS, RSSHub)
# - secrith: Application Secrith (frontend et backend)
# - storage: Services de stockage comme Samba
# - automation: Services d'automatisation comme N8N
# - tools: Outils divers (Snapdrop)
# - all: Tous les services
#
# Utilisation:
# - Démarrer un profil: docker compose --profile media up -d
# - Démarrer plusieurs profils: docker compose --profile media --profile domotique up -d
# - Démarrer tous les services: docker compose --profile all up -d
# - Arrêter un profil: docker compose --profile media down

services:
  # Traefik - Reverse Proxy
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.file.filename=/etc/traefik/config.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsEncrypt.acme.httpChallenge.entryPoint=web"
      - "--certificatesresolvers.letsEncrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsEncrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - traefik_letsencrypt:/letsencrypt
      - traefik_config:/etc/traefik
    networks:
      - traefik_net
    profiles:
      - infrastructure
      - all

  # Homarr - Dashboard
  homarr:
    container_name: homarr
    image: ghcr.io/homarr-labs/homarr:latest
    restart: unless-stopped
    networks:
      - traefik_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - homarr_data:/appdata
    environment:
      - TZ=${TZ}
      - SECRET_ENCRYPTION_KEY=${HOMARR_SECRET_ENCRYPTION_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homarr.rule=Host(`${DOMAIN_BASE}`)"
      - "traefik.http.routers.homarr.entrypoints=web"
      - "traefik.http.routers.homarr.entrypoints=websecure"
      - "traefik.http.routers.homarr.tls=true"
      - "traefik.http.services.homarr.loadbalancer.server.port=7575"
    depends_on:
      - traefik
    profiles:
      - dashboard
      - infrastructure
      - all

  # Portainer - Container Management
  portainer:
    image: portainer/portainer-ce:2.21.4
    container_name: portainer
    restart: unless-stopped
    networks:
      - traefik_net
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_BASE}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=letsEncrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=traefik_net"
      # - "traefik.http.routers.portainer.middlewares=local-vpn-only@file"
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ}
    depends_on:
      - traefik
    profiles:
      - infrastructure
      - all

  # Watchtower - Auto-updates
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 86400
    environment:
      - TZ=Europe/Paris
    profiles:
      - infrastructure
      - all

  # N8N - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - GENERIC_TIMEZONE=${TZ}
      - N8N_HOST=n8n.${DOMAIN_BASE}
      - N8N_PORT=5678
      - WEBHOOK_URL=https://n8n.${DOMAIN_BASE}/
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN_BASE}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsEncrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.docker.network=traefik_net"
    restart: unless-stopped
    depends_on:
      - postgres
      - traefik
    profiles:
      - automation
      - all

  # FreshRSS - RSS Reader
  freshrss:
    container_name: freshrss
    image: freshrss/freshrss
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - environment=development
    volumes:
      - freshrss_data:/var/www/FreshRSS/data
      - freshrss_extensions:/var/www/FreshRSS/extensions
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.freshrss.rule=Host(`rss.${DOMAIN_BASE}`)"
      - "traefik.http.routers.freshrss.entrypoints=websecure"
      - "traefik.http.routers.freshrss.tls.certresolver=letsEncrypt"
      - "traefik.http.services.freshrss.loadbalancer.server.port=80"
    depends_on:
      - traefik
      - rsshub
    profiles:
      - rss
      - all

  # RSSHub - RSS Generator
  rsshub:
    container_name: rsshub
    image: diygod/rsshub
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      - NODE_ENV=production
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rsshub.rule=Host(`rsshub.${DOMAIN_BASE}`)"
      - "traefik.http.routers.rsshub.entrypoints=websecure"
      - "traefik.http.routers.rsshub.tls=true"
      - "traefik.http.routers.rsshub.tls.certresolver=letsEncrypt"
      - "traefik.http.services.rsshub.loadbalancer.server.port=1200"
    depends_on:
      - traefik
    profiles:
      - rss
      - all

  # Snapdrop - Partage de fichiers local
  snapdrop:
    image: linuxserver/snapdrop:version-f88d46ed
    container_name: snapdrop
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.snapdrop.rule=Host(`snapdrop.${DOMAIN_BASE}`)"
      - "traefik.http.routers.snapdrop.entrypoints=websecure"
      - "traefik.http.routers.snapdrop.tls=true"
      - "traefik.http.routers.snapdrop.tls.certresolver=letsEncrypt"
      - "traefik.http.services.snapdrop.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik_net"
    depends_on:
      - traefik
    profiles:
      - tools
      - all

  # Plex - Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - TZ=${TZ}
    volumes:
      - plex_config:/config
      - "${MEDIA_PATH}:/media"
      - /dev/shm:/dev/shm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN_BASE}`)"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls=true"
      - "traefik.http.routers.plex.tls.certresolver=letsEncrypt"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    depends_on:
      - traefik
    profiles:
      - media
      - all

  # Overseerr - Demandes de médias
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=1000
      - LOG_LEVEL=info
      - TZ=${TZ}
    volumes:
      - overseerr_config:/config
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN_BASE}`)"
      - "traefik.http.routers.overseerr.entrypoints=websecure"
      - "traefik.http.routers.overseerr.tls=true"
      - "traefik.http.routers.overseerr.tls.certresolver=letsEncrypt"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
      - "traefik.docker.network=traefik_net"
    depends_on:
      - plex
      - traefik
    profiles:
      - media
      - all

  # Samba - Partage de fichiers
  samba:
    image: dperson/samba
    container_name: samba
    ports:
      - "139:139/tcp"
      - "445:445/tcp"
    volumes:
      - samba_config:/etc/samba
      - samba_logs:/var/log/samba
      - "${HDD_PATH}:/mount"
      - "./init.sh:/init.sh"  # Monte le script d'initialisation
    environment:
      - USERID=1000
      - GROUPID=1001
      - TZ=${TZ}
    command: ["/bin/sh", "-c", "/init.sh && /usr/sbin/smbd -F"]
    restart: unless-stopped
    profiles:
      - storage
      - all

  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    volumes:
      - mosquitto_config:/mosquitto/config
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    networks:
      - homeassistant_net
    environment:
      - TZ=${TZ}
    profiles:
      - domotique
      - all

  # Zigbee2MQTT
  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    container_name: zigbee2mqtt
    restart: unless-stopped
    volumes:
      - zigbee2mqtt_config:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - 8080:8123
    environment:
      - TZ=${TZ}
    devices:
      - ${ZIGBEE_DONGLE_PATH}:/dev/ttyUSB0
    networks:
      - homeassistant_net
    depends_on:
      - mosquitto
    profiles:
      - domotique
      - all

  # Home Assistant
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    volumes:
      - homeassistant_config:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
    ports:
      - 8123:8123
    devices:
      - ${ZIGBEE_DONGLE_PATH}:/dev/ttyUSB0
    networks:
      - homeassistant_net
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homeassistant.rule=Host(`home.${DOMAIN_BASE}`)"
      - "traefik.http.routers.homeassistant.entrypoints=websecure"
      - "traefik.http.routers.homeassistant.tls=true"
      - "traefik.http.routers.homeassistant.tls.certresolver=letsEncrypt"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
      - "traefik.docker.network=traefik_net"
    depends_on:
      - mosquitto
      - zigbee2mqtt
    profiles:
      - domotique
      - all

  # Secrith Backend
  secrith-back:
    build:
      context: ./secrith/secrith-back
      dockerfile: Dockerfile
    container_name: secrith-back
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=8000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secrith-back.rule=Host(`${DOMAIN_SECRITH_API}`)"
      - "traefik.http.routers.secrith-back.entrypoints=websecure"
      - "traefik.http.routers.secrith-back.tls=true"
      - "traefik.http.routers.secrith-back.tls.certresolver=letsEncrypt"
      - "traefik.http.services.secrith-back.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik_net"
    networks:
      - secrith-network
      - traefik_net
    depends_on:
      - traefik
    profiles:
      - secrith
      - all

  # Secrith Frontend
  secrith-front:
    build:
      context: ./secrith/secrith.com
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=https://${DOMAIN_SECRITH_API}
    container_name: secrith-front
    restart: always
    ports:
      - "4173:4173"
    environment:
      - VITE_BACKEND_URL=https://${DOMAIN_SECRITH_API}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secrith-front.rule=Host(`${DOMAIN_SECRITH}`)"
      - "traefik.http.routers.secrith-front.entrypoints=websecure"
      - "traefik.http.routers.secrith-front.tls=true"
      - "traefik.http.routers.secrith-front.tls.certresolver=letsEncrypt"
      - "traefik.http.services.secrith-front.loadbalancer.server.port=4173"
      - "traefik.docker.network=traefik_net"
    networks:
      - secrith-network
      - traefik_net
    depends_on:
      - secrith-back
      - traefik
    profiles:
      - secrith
      - all

  # Redis - Cache
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - traefik_net
    profiles:
      - database
      - all

  # PostgreSQL - Base de données
  postgres:
    container_name: postgres
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik_net
    profiles:
      - database
      - all

  # MySQL - Base de données pour phpMyAdmin
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - traefik_net
    profiles:
      - database
      - all

  # phpMyAdmin - Interface MySQL
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin.${DOMAIN_BASE}`)"
      - "traefik.http.routers.phpmyadmin.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin.tls=true"
      - "traefik.http.routers.phpmyadmin.tls.certresolver=letsEncrypt"
      - "traefik.docker.network=traefik_net"
    networks:
      - traefik_net
    depends_on:
      - mysql
      - traefik
    profiles:
      - database
      - all

  # Planka
  planka:
    image: ghcr.io/plankanban/planka:latest
    container_name: planka
    restart: unless-stopped
    depends_on:
      - postgres
      - traefik
    networks:
      - traefik_net
    environment:
      - TRUST_PROXY=1
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/planka
      - SECRET_KEY=${PLANKA_SECRET_KEY}
      - BASE_URL=https://planka.${DOMAIN_BASE}
      - TZ=${TZ}
    volumes:
      - planka_user_avatars:/app/public/user-avatars
      - planka_project_bg:/app/public/project-backgrounds
      - planka_attachments:/app/public/attachments
      - planka_data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.planka.rule=Host(`planka.${DOMAIN_BASE}`)"
      - "traefik.http.routers.planka.entrypoints=websecure"
      - "traefik.http.routers.planka.tls=true"
      - "traefik.http.routers.planka.tls.certresolver=letsEncrypt"
      - "traefik.http.services.planka.loadbalancer.server.port=1337"
      - "traefik.docker.network=traefik_net"
    profiles:
      - tools
      - all

networks:
  traefik_net:
    name: traefik_net
    external: true
  homeassistant_net:
    name: homeassistant_net
  secrith-network:
    driver: bridge

volumes:
  # Traefik
  traefik_letsencrypt:
  traefik_config:
  
  # Homarr
  homarr_configs:
  homarr_icons:
  homarr_data:
  
  # Portainer
  portainer_data:
  
  # N8N
  n8n_data:
  
  # FreshRSS
  freshrss_data:
  freshrss_extensions:
  
  # Planka
  planka_user_avatars:
  planka_project_bg:
  planka_attachments:
  planka_data:
  
  # Redis
  redis_data:
  
  # PostgreSQL
  postgres_data:
  
  # MySQL
  mysql_data:
  
  # Plex
  plex_config:
  
  # Overseerr
  overseerr_config:
  
  # Samba
  samba_config:
  samba_logs:
  samba_init:
  
  # Home Assistant
  homeassistant_config:
  
  # Zigbee2MQTT
  zigbee2mqtt_config:
  
  # Mosquitto
  mosquitto_config:
  mosquitto_data:
  mosquitto_log: